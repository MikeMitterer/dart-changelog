/**
 * Important: You have to have at least on tag set with git - git tag v0.1
 *
 * Follow these steps:
 *
 *  git commit -am "Whatever..."
 *  git push origin
 *  gradle sVIY wC && pub publish
 *
 * Git commands should be clear
 *
 * gradle sVIY - is a shortcut to "gradle setVersionInYaml"
 * gradle wC - ist a shortcut to "gradel writeChangeLog"
 *
 * The && means if everything went OK with the gradle tasks execute pub publish
 */
ext.gitExtendedVersionX = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    def version = stdout.toString().trim().replaceFirst("v","").replaceFirst('-(?!.*-).*','').replaceFirst("-",".");
    if(version.indexOf(".") == version.lastIndexOf(".")) {
        version = version + ".0"
    }
    return version;
}

def readTags() {
    def tags = []
    def proc = "git tag -l".execute()
    proc.in.eachLine { line -> tags += line}
    tags.sort {}
    Collections.reverse( tags )
    tags
}

def getChangeLog(final String range) {
    def stdout = new ByteArrayOutputStream()
    exec {
        if(range == null || range == "") {
            commandLine 'git', 'log', "--pretty=format:$changelogformat"
        } else {
            commandLine 'git', 'log',range , "--pretty=format:$changelogformat"
        }
        standardOutput = stdout
    }
    stdout.toString();
}

version = gitExtendedVersionX() // Sample: 0.5.4-19

ext {
    ghaccount = "MikeMitterer"
    ghproject = "git-init"

    // pretty-format: http://opensource.apple.com/source/Git/Git-19/src/git-htmldocs/pretty-formats.txt
    //changelogformat = "<li>%s (<a href=\"http://github.com/$ghaccount/$ghproject/commit/%H\">%h</a>)</li>"
    changelogformat = "* %s [%h](http://github.com/$ghaccount/$ghproject/commit/%H)"

    yamlFilename = "pubspec.yaml"
}

task showVersion() << {
    print version
}

task setVersionInYaml << {
    final File yamlfile = file(yamlFilename)

    String contents = yamlfile.text;
    contents = contents.replaceFirst(/version: .*/,"version: $version");

    yamlfile.write(contents, 'UTF-8')
}

task writeChangeLog(dependsOn: setVersionInYaml) {
    def linksForChangeLog = "";
    def tags = readTags();

    if(tags.size > 1) {
        linksForChangeLog += "###$ghproject ChangeLog v$version###\n\n"
        // linksForChangeLog += "$ghproject ChangeLog ###v$version###\n"

        linksForChangeLog += getChangeLog("...${tags[0]}")
        linksForChangeLog += "\n\n"

        for (int i = 0; i < tags.size - 1; i++) {
            def changes = getChangeLog("${tags[i]}...${tags[i+1]}")
            if(changes == "") {
                continue;
            }

            linksForChangeLog += "###${tags[i]}###\n"
            linksForChangeLog += changes
            linksForChangeLog += "\n\n"
        }
        linksForChangeLog += "###${tags[tags.size - 1]}###\n"
        linksForChangeLog += getChangeLog("${tags[tags.size - 1]}")

    } else if(tags.size == 1) {
        linksForChangeLog += "###v$version###\n"
        linksForChangeLog += getChangeLog("")

    } else {
        linksForChangeLog += getChangeLog("")
    }

    doLast {
        final File configFile = file('CHANGELOG.md')

        //final String contents = "###Changes:###\n$linksForChangeLog"
        configFile.write(linksForChangeLog, 'UTF-8')
        //print contents
    }
}

